apiVersion: apps/v1
kind: Deployment
metadata:
  name: barebar-wordpress
  namespace: private-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: barebar-wordpress
  template:
    metadata:
      labels:
        app: barebar-wordpress
    spec:
      containers:
        - name: barebar-wordpress
          image: ${DOCKER_IMAGE}
          imagePullPolicy: Always
          env:
          - name: WORDPRESS_DB_HOST
            value: "mysql"
          - name: WORDPRESS_DB_PASSWORD
            value: ${MYSQL_PASSWORD}
          ports:
          - name: http
            containerPort: 80
      imagePullSecrets:
        - name: regcred
---
kind: Service
apiVersion: v1
metadata:
  name: barebar-wordpress
  namespace: private-prod
  labels:
    app: barebar-wordpress
spec:
  selector:
    app: barebar-wordpress
  ports:
  - name: http
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-barebar-wordpress
  namespace: private-prod
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
  - host: barebar.k8s.lars.ninja
    http:
      paths:
      - path: /
        backend:
          serviceName: barebar-wordpress
          servicePort: 80
  tls:
  - hosts:
    - barebar.k8s.lars.ninja
    secretName: barebar-wordpress-api-cert

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: private-prod
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: private-prod
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: ${MYSQL_PASSWORD}
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: private-prod
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: microk8s-hostpath